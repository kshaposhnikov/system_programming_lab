; Программа Hello 1
; Шаблон EXE программы в стандартных директивах сегментации

; Определяем сегмент стека размером 1024 байт
; Сегмент выравнивается на границу параграфа.
; При компоновке все сегменты стека с именем MyStack будут соединены
MyStack segment para stack 'Stack'
    db 1024 dup (?)
MyStack ends

; Определяем сегмент данных
; Сегмент выравнивается на границу параграфа
; При компоновке все сегменты с именем MyData будут соединены
MyData segment para public 'Data'
; Инициализируем переменную Hello
; Апострафы преобразуют символы в ASCII коды при трансляции
; 0Ah - код перевода строки, 0Dh - код установки курсора в начало строки
    Hello db 'Hello1!', 0Ah, 0Dh, '$'
MyData ends

; Определяем сегмент кода
; Сегмент выравнивается на границу параграфа
; При компоновке все сегменты с именем MyCode будут соединены
MyCode segment para public 'Code'

; Сообщаем транслятору о том, какой сегмент к какому
; сегментному регистру должен быть привязан
assume cs:MyCode, ds:MyData, ss:MyStack

; Точка входа в программу
start:
    ; Инициализируем сегментный регистр DS, т.к. при запуске
    ; EXE программы он не определен
    ; Инициализация DS производится через регистр AX, т.к. нет команд
    ; непосредственной загрузки сегментных регистров из памяти.
    mov ax, MyData  ; заносим адрес сегмента данных AX
    mov ds, ax      ; помещаем ax в ds
    
    ; Выводим строку на экран с помощью функции 09h прерывания int 21h
    ; Вывод производится с загруженного в DX адреса до знака $
    lea dx, Hello   ; загружаем в dx адрес переменной Hello
    mov ah, 09h     ; заносим в ah номер функции
    int 21h         ; выводим строку на экран
    
    ; Осуществляем корректное завершение программы с помощью функции
    ; 4Ch прерывания int 21h. В al поиещается код возврата
    mov ah, 4ch     ; заносим в ah номер функции
    mov al, 00h     ; заносим в al код возврата
    int 21h
MyCode ends
end start           ; конец программы